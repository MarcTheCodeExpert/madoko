/* This module implements string dictionaries.
*/
module interface compat/dict
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types = "";
import std/core/hnd = std/core/hnd = "";
import std/core = std/core = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 
// A dictionary is a map from strings to values
pub type dict <a> :: V -> V ;
// The type of mutable string dictionaries
pub type mdict <(h :: H),a> :: (H, V) -> V ;
 
//------------------------------
//#kki: declarations
 
pub fun dictCopy : forall<a> (d : (dict :: V -> V)<a>) -> (dict :: V -> V)<a>;
// Return the keys in a dictionary
pub fun keys : forall<a,(h :: H)> (d : (mdict :: (H, V) -> V)<(h :: H),a>) -> <(std/core/types/read :: H -> X)<(h :: H)>> (std/core/types/vector :: V -> V)<std/core/types/string>;
// Return the keys in a
pub fun keys.1 : forall<a> (d : (dict :: V -> V)<a>) -> (std/core/types/vector :: V -> V)<std/core/types/string>;
pub fun unsafeDictGet : forall<a> (d : (dict :: V -> V)<a>, key : std/core/types/string) -> a;
pub fun unsafeDictAdd : forall<a> (d : (dict :: V -> V)<a>, key : std/core/types/string, value : a) -> ();
pub fun containsKey : forall<a,(h :: H)> (md : (mdict :: (H, V) -> V)<(h :: H),a>, s : std/core/types/string) -> <(std/core/types/read :: H -> X)<(h :: H)>> std/core/types/bool;
pub fun containsKey.1 : forall<a> (d : (dict :: V -> V)<a>, key : std/core/types/string) -> std/core/types/bool;
pub fun unsafeIndex : forall<a,(h :: H)> (md : (mdict :: (H, V) -> V)<(h :: H),a>, s : std/core/types/string) -> <(std/core/types/read :: H -> X)<(h :: H)>> a;
pub fun copy : forall<(h :: H),a> (md : (mdict :: (H, V) -> V)<(h :: H),a>) -> <(std/core/types/alloc :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(h :: H)>> (mdict :: (H, V) -> V)<(h :: H),a>;
// Freeze a mutable dictionary into a ":dict"
pub fun freeze : forall<(h :: H),a> (md : (mdict :: (H, V) -> V)<(h :: H),a>) -> <(std/core/types/alloc :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(h :: H)>> (dict :: V -> V)<a>;
pub fun isNull : forall<a> (x : a) -> std/core/types/bool;
// Create a mutable string dictionary
pub fun mdict : forall<(h :: H),a> () -> <(std/core/types/alloc :: H -> X)<(h :: H)>> (mdict :: (H, V) -> V)<(h :: H),a>;
// Execute action for each key/value pair in a dictionary.
pub fun foreach : forall<a,(e :: E)> (d : (dict :: V -> V)<a>, action : (std/core/types/string, a) -> (e :: E) ()) -> (e :: E) ();
// Append two dictionaries.
pub fun (+) : forall<a> (d1 : (dict :: V -> V)<a>, d2 : (dict :: V -> V)<a>) -> (dict :: V -> V)<a>;
// Index into a string dictionary
pub fun ([]) : forall<a,(h :: H)> (md : (mdict :: (H, V) -> V)<(h :: H),a>, s : std/core/types/string) -> <(std/core/types/read :: H -> X)<(h :: H)>> (std/core/types/maybe :: V -> V)<a>;
// Assign to a string dictionary
pub fun ([].1) : forall<a,(h :: H)> (md : (mdict :: (H, V) -> V)<(h :: H),a>, s : std/core/types/string, assigned : a) -> <(std/core/types/write :: H -> X)<(h :: H)>> ();
// Index into a string dictionary
pub fun ([].2) : forall<a> (d : (dict :: V -> V)<a>, key : std/core/types/string) -> (std/core/types/maybe :: V -> V)<a>;
// Create a new empty dictionary
pub fun dict : forall<a> () -> (dict :: V -> V)<a>;
// Create a new dictionary from a ":list" of key value pairs.
pub fun dict.1 : forall<a> (elems : (std/core/list :: V -> V)<(std/core/types/string, a)>) -> (dict :: V -> V)<a>;
// Create a new dictionary from a ":vector" of key/value pairs.
pub fun dict.2 : forall<a> (elems : (std/core/types/vector :: V -> V)<(std/core/types/string, a)>) -> (dict :: V -> V)<a>;
// monadic lift
fun .mlift2257-map : forall<a,(e :: E)> (k : std/core/types/string, .y.2255 : a) -> (e :: E) (std/core/types/string, a);
// monadic lift
fun .mlift2258-map : forall<a,(e :: E)> (.y.2256 : (std/core/types/vector :: V -> V)<(std/core/types/string, a)>) -> (e :: E) (dict :: V -> V)<a>;
// Map a function over the values in a dictionary.
pub fun map : forall<a,b,(e :: E)> (d : (dict :: V -> V)<a>, f : (std/core/types/string, a) -> (e :: E) b) -> (e :: E) (dict :: V -> V)<b>;
// Convert a dictionary to a vector of key/value pairs
pub fun vector : forall<a,(h :: H)> (d : (mdict :: (H, V) -> V)<(h :: H),a>) -> <(std/core/types/read :: H -> X)<(h :: H)>> (std/core/types/vector :: V -> V)<(std/core/types/string, a)>;
// Convert a dictionary to a vector of key/value pairs
pub fun vector.1 : forall<a> (d : (dict :: V -> V)<a>) -> (std/core/types/vector :: V -> V)<(std/core/types/string, a)>;
// Convert a dictionary to a list of key/value pairs
pub fun list : forall<a,(h :: H)> (d : (mdict :: (H, V) -> V)<(h :: H),a>) -> <(std/core/types/read :: H -> X)<(h :: H)>> (std/core/list :: V -> V)<(std/core/types/string, a)>;
// Convert a dictionary to a list of key/value pairs
pub fun list.1 : forall<a> (d : (dict :: V -> V)<a>) -> (std/core/list :: V -> V)<(std/core/types/string, a)>;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
specialize "_*" fun (+) // inline size: 1
  = forall<a> fn(d1: (dict :: V -> V)<a>, d2: (dict :: V -> V)<a>){
    val dnew : (dict :: V -> V)<a>
      = compat/dict/dictCopy<a>(d1);
    val _ : ()
      = std/core/foreach.3<std/core/types/string,(std/core/types/(<>) :: E)>((compat/dict/keys.1<a>(d2)), (fn(k: std/core/types/string){
          val value.2252 : a
                = (compat/dict/unsafeDictGet<a>(d2, k));
          (compat/dict/unsafeDictAdd<a>(dnew, k, value.2252));
        }));
    dnew;
  };
specialize "*" fun dict.2 // inline size: 1
  = forall<a> fn(elems: (std/core/types/vector :: V -> V)<(std/core/types/string, a)>){
    val d : (dict :: V -> V)<a>
      = compat/dict/dict<a>();
    val _ : ()
      = std/core/foreach.3<(std/core/types/string, a),(std/core/types/(<>) :: E)>(elems, (fn(elem: (std/core/types/string, a)){
          (match (elem) {
            ((.skip std/core/types/(,)((key: std/core/types/string) : std/core/types/string, (value: a) : a) : (std/core/types/string, a) ) as .pat: (std/core/types/string, a))
               -> compat/dict/unsafeDictAdd<a>(d, key, value);
          });
        }));
    d;
  };
specialize "**" fun foreach // inline size: 1
  = forall<a,(e :: E)> fn<(e :: E)>(d: (dict :: V -> V)<a>, action: (std/core/types/string, a) -> (e :: E) ()){
    std/core/foreach.3<std/core/types/string,(e :: E)>((std/core/types/.open<(std/core/types/(<>) :: E),(e :: E),(d : (dict :: V -> V)<a>) -> (std/core/types/vector :: V -> V)<std/core/types/string>,(d : (dict :: V -> V)<a>) -> (e :: E) (std/core/types/vector :: V -> V)<std/core/types/string>>((compat/dict/keys.1<a>))(d)), (fn<(e :: E)>(k: std/core/types/string){
        (action(k, (std/core/types/.open<(std/core/types/(<>) :: E),(e :: E),(d : (dict :: V -> V)<a>, key : std/core/types/string) -> a,(d : (dict :: V -> V)<a>, key : std/core/types/string) -> (e :: E) a>((compat/dict/unsafeDictGet<a>))(d, k))));
      }));
  };
specialize "*" fun list // inline size: 1
  = forall<a,(h :: H)> fn<<(std/core/types/read :: H -> X)<(h :: H)>>>(d: (mdict :: (H, V) -> V)<(h :: H),a>){
    val v.2247 : (std/core/types/vector :: V -> V)<(std/core/types/string, a)>
          = std/core/map.7<std/core/types/string,(std/core/types/string, a),<(std/core/types/read :: H -> X)<(h :: H)>>>((compat/dict/keys<a,(h :: H)>(d)), (fn<<(std/core/types/read :: H -> X)<(h :: H)>>>(key: std/core/types/string){
              (std/core/types/(,)<std/core/types/string,a>(key, (compat/dict/unsafeIndex<a,(h :: H)>(d, key))));
            }));
    std/core/vlist<(std/core/types/string, a)>(v.2247, (std/core/types/None<(std/core/list :: V -> V)<(std/core/types/string, a)>>));
  };
specialize "*" fun list.1 // inline size: 1
  = forall<a> fn(d: (dict :: V -> V)<a>){
    val v.2249 : (std/core/types/vector :: V -> V)<(std/core/types/string, a)>
          = std/core/map.7<std/core/types/string,(std/core/types/string, a),(std/core/types/(<>) :: E)>((compat/dict/keys.1<a>(d)), (fn(key: std/core/types/string){
              (std/core/types/(,)<std/core/types/string,a>(key, (compat/dict/unsafeDictGet<a>(d, key))));
            }));
    std/core/vlist<(std/core/types/string, a)>(v.2249, (std/core/types/None<(std/core/list :: V -> V)<(std/core/types/string, a)>>));
  };
specialize "**" fun map // inline size: 1
  = forall<a,b,(e :: E)> fn<(e :: E)>(d: (dict :: V -> V)<a>, f: (std/core/types/string, a) -> (e :: E) b){
    std/core/types/.open<(std/core/types/(<>) :: E),(e :: E),(elems : (std/core/types/vector :: V -> V)<(std/core/types/string, b)>) -> (dict :: V -> V)<b>,(elems : (std/core/types/vector :: V -> V)<(std/core/types/string, b)>) -> (e :: E) (dict :: V -> V)<b>>((compat/dict/dict.2<b>))((std/core/map.7<std/core/types/string,(std/core/types/string, b),(e :: E)>((std/core/types/.open<(std/core/types/(<>) :: E),(e :: E),(d : (dict :: V -> V)<a>) -> (std/core/types/vector :: V -> V)<std/core/types/string>,(d : (dict :: V -> V)<a>) -> (e :: E) (std/core/types/vector :: V -> V)<std/core/types/string>>((compat/dict/keys.1<a>))(d)), (fn<(e :: E)>(k: std/core/types/string){
        (std/core/types/(,)<std/core/types/string,b>(k, (f(k, (std/core/types/.open<(std/core/types/(<>) :: E),(e :: E),(d : (dict :: V -> V)<a>, key : std/core/types/string) -> a,(d : (dict :: V -> V)<a>, key : std/core/types/string) -> (e :: E) a>((compat/dict/unsafeDictGet<a>))(d, k))))));
      }))));
  };
specialize "*" fun vector // inline size: 1
  = forall<a,(h :: H)> fn<<(std/core/types/read :: H -> X)<(h :: H)>>>(d: (mdict :: (H, V) -> V)<(h :: H),a>){
    std/core/map.7<std/core/types/string,(std/core/types/string, a),<(std/core/types/read :: H -> X)<(h :: H)>>>((compat/dict/keys<a,(h :: H)>(d)), (fn<<(std/core/types/read :: H -> X)<(h :: H)>>>(key: std/core/types/string){
        (std/core/types/(,)<std/core/types/string,a>(key, (compat/dict/unsafeIndex<a,(h :: H)>(d, key))));
      }));
  };
specialize "*" fun vector.1 // inline size: 1
  = forall<a> fn(d: (dict :: V -> V)<a>){
    std/core/map.7<std/core/types/string,(std/core/types/string, a),(std/core/types/(<>) :: E)>((compat/dict/keys.1<a>(d)), (fn(key: std/core/types/string){
        (std/core/types/(,)<std/core/types/string,a>(key, (compat/dict/unsafeDictGet<a>(d, key))));
      }));
  };
fun ([]) // inline size: 4
  = forall<a,(h :: H)> fn<<(std/core/types/read :: H -> X)<(h :: H)>>>(md: (mdict :: (H, V) -> V)<(h :: H),a>, s: std/core/types/string){
    (match ((compat/dict/containsKey<a,(h :: H)>(md, s))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Just<a>((compat/dict/unsafeIndex<a,(h :: H)>(md, s)));
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/types/Nothing<a>;
    });
  };
fun ([].2) // inline size: 4
  = forall<a> fn(d: (dict :: V -> V)<a>, key: std/core/types/string){
    (match ((compat/dict/containsKey.1<a>(d, key))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Just<a>((compat/dict/unsafeDictGet<a>(d, key)));
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/core/types/Nothing<a>;
    });
  };
fun dict.1 // inline size: 3
  = forall<a> fn(elems: (std/core/list :: V -> V)<(std/core/types/string, a)>){
    val d : (dict :: V -> V)<a>
      = compat/dict/dict<a>();
    val _ : ()
      = std/core/foreach<(std/core/types/string, a),(std/core/types/(<>) :: E)>(elems, (fn(elem: (std/core/types/string, a)){
          (match (elem) {
            ((.skip std/core/types/(,)((key: std/core/types/string) : std/core/types/string, (value: a) : a) : (std/core/types/string, a) ) as .pat: (std/core/types/string, a))
               -> compat/dict/unsafeDictAdd<a>(d, key, value);
          });
        }));
    d;
  };
fun dict.2 // inline size: 3
  = forall<a> fn(elems: (std/core/types/vector :: V -> V)<(std/core/types/string, a)>){
    val d : (dict :: V -> V)<a>
      = compat/dict/dict<a>();
    val _ : ()
      = std/core/foreach.3<(std/core/types/string, a),(std/core/types/(<>) :: E)>(elems, (fn(elem: (std/core/types/string, a)){
          (match (elem) {
            ((.skip std/core/types/(,)((key: std/core/types/string) : std/core/types/string, (value: a) : a) : (std/core/types/string, a) ) as .pat: (std/core/types/string, a))
               -> compat/dict/unsafeDictAdd<a>(d, key, value);
          });
        }));
    d;
  };
fun vector // inline size: 4
  = forall<a,(h :: H)> fn<<(std/core/types/read :: H -> X)<(h :: H)>>>(d: (mdict :: (H, V) -> V)<(h :: H),a>){
    std/core/map.7<std/core/types/string,(std/core/types/string, a),<(std/core/types/read :: H -> X)<(h :: H)>>>((compat/dict/keys<a,(h :: H)>(d)), (fn<<(std/core/types/read :: H -> X)<(h :: H)>>>(key: std/core/types/string){
        (std/core/types/(,)<std/core/types/string,a>(key, (compat/dict/unsafeIndex<a,(h :: H)>(d, key))));
      }));
  };
fun vector.1 // inline size: 4
  = forall<a> fn(d: (dict :: V -> V)<a>){
    std/core/map.7<std/core/types/string,(std/core/types/string, a),(std/core/types/(<>) :: E)>((compat/dict/keys.1<a>(d)), (fn(key: std/core/types/string){
        (std/core/types/(,)<std/core/types/string,a>(key, (compat/dict/unsafeDictGet<a>(d, key))));
      }));
  };