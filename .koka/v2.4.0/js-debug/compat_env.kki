/*
Access to the program environment and commmand line arguments.

Print the environment: "env.list.map(fun(p) { p.fst + ""="" + p.snd }).join(""\n"").print"

Note: we view the environment and command line as (total) constants in the
program. i.e. as if the program is only compiled at the point when both the 
environment and command line is supplied. 
*/
module interface compat/env
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types = "";
import std/core = std/core = "";
import compat/path = compat/path = "";
import compat/dict = compat/dict = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
fun getArgv : () -> (std/core/types/vector :: V -> V)<std/core/types/string>;
fun getEnvironment : () -> (compat/dict/dict :: V -> V)<std/core/types/string>;
// The unprocessed command line that was used to start this program.
// On ''Node'' the first arguments will often be of the form "[""node"",""interactive.js"",...]".
pub val argv : (std/core/list :: V -> V)<std/core/types/string>;
// Return the arguments that were passed to program itself.
// Strips off the initial program from the unprocessed command line.
// i.e. If a program started as:
//     > node myprogram.js --flag bla
// The "arguments" list will be "[""--flag"",""bla""]"
pub val arguments : (std/core/list :: V -> V)<std/core/types/string>;
// The environment variables for this program
pub val env : (compat/dict/dict :: V -> V)<std/core/types/string>;
// Returns the value of an environment variable "name".
// Returns "default" (= |""|) if the environment variable was not present.
pub fun getEnv : (name : std/core/types/string, default : (std/core/types/optional :: V -> V)<std/core/types/string>) -> std/core/types/string;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 