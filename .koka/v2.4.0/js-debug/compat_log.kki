// Log messages
module interface compat/log
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types = "";
import std/core/hnd = std/core/hnd = "";
import std/core = std/core = "";
import compat/dict = compat/dict = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
// The `:io` effect is used for functions that perform arbitrary I/O operations.
local alias std/core/io :: E = <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,((std/core/io-noexn :: E) == 3 <(std/core/types/div :: X),((std/core/io-total :: E) == 2 <(std/core/types/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/fsys :: X),(std/core/ui :: X),((std/core/types/st :: H -> E)<(std/core/types/global :: H)> == 1 <(std/core/types/read :: H -> X)<(std/core/types/global :: H)>,(std/core/types/write :: H -> X)<(std/core/types/global :: H)>,(std/core/types/alloc :: H -> X)<(std/core/types/global :: H)>>)>)>)> = 4;
// Stateful functions can manipulate heap `:h` using allocations, reads and writes.
local alias std/core/types/st<(h :: H)> :: H -> E = <(std/core/types/read :: H -> X)<(h :: H)>,(std/core/types/write :: H -> X)<(h :: H)>,(std/core/types/alloc :: H -> X)<(h :: H)>> = 1;
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
pub val logDict : (compat/dict/mdict :: (H, V) -> V)<(std/core/types/global :: H),std/core/types/string>;
// Get the current log. Since this is in the "io" effect, "withLog" is preferred.
pub fun getLog : (logName : std/core/types/string) -> <(std/core/io :: E)> std/core/types/string;
// monadic lift
fun .mlift1078-log : (logName : std/core/types/string, message : std/core/types/string, .c.1068 : std/core/types/string) -> ();
// Total function that logs a message in a certain log "logName".
// Has no observable effect but see "withLog".
pub fun log : (logName : std/core/types/string, message : std/core/types/string) -> ();
// Disable logging completely.
pub fun nolog : () -> <(std/core/types/st :: H -> E)<(std/core/types/global :: H)>> ();
// monadic lift
fun .mlift1079-withLog : forall<a> (.c.1072 : std/core/types/string, x : a, .c.1073 : ()) -> (std/core/types/string, a);
// monadic lift
fun .mlift1080-withLog : forall<a> (logName : std/core/types/string, oldLog : (std/core/types/maybe :: V -> V)<std/core/types/string>, x : a, .c.1072 : std/core/types/string) -> (std/core/types/string, a);
// Encloses a possibly total "action" and returns its result together
// with the contents of a log named "logName". The contents of the log
// are non-deterministically determined. However, in practice, they contain
// any messages that were recorded in the "action" by calls to "log".
// However, if "nolog" was called, the log is always empty.
pub fun withLog : forall<a,(e :: E)> (logName : std/core/types/string, action : () -> <(std/core/types/ndet :: X)|(e :: E)> a) -> <(std/core/types/ndet :: X)|(e :: E)> (std/core/types/string, a);
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
fun nolog // inline size: 1
  = fn<(std/core/types/st :: H -> E)<(std/core/types/global :: H)>>(){
    compat/dict/([].1)<std/core/types/string,(std/core/types/global :: H)>(compat/log/logDict, "nolog", "");
  };