/* Extended string operations and a string builder.
*/
module interface compat/string
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types = "";
import std/core/hnd = std/core/hnd = "";
import std/core = std/core = "";
import compat/array = compat/array = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
// Stateful functions can manipulate heap `:h` using allocations, reads and writes.
local alias std/core/types/st<(h :: H)> :: H -> E = <(std/core/types/read :: H -> X)<(h :: H)>,(std/core/types/write :: H -> X)<(h :: H)>,(std/core/types/alloc :: H -> X)<(h :: H)>> = 1;
 
//------------------------------
//#kki: type declarations
 
// A `:builder` is used to append strings in linear time.
pub type builder <(h :: H)> :: H -> V ;
 
//------------------------------
//#kki: declarations
 
fun unitAppend : forall<(h :: H)> (b : (builder :: H -> V)<(h :: H)>, s : std/core/types/string) -> <(std/core/types/write :: H -> X)<(h :: H)>> ();
// O(n). Read the current string from a string builder.
pub fun build : forall<(h :: H)> (b : (builder :: H -> V)<(h :: H)>) -> <(std/core/types/read :: H -> X)<(h :: H)>> std/core/types/string;
// Create a string builder
pub fun builder : forall<(h :: H)> () -> <(std/core/types/alloc :: H -> X)<(h :: H)>> (builder :: H -> V)<(h :: H)>;
// Indent all lines a string `s` by `n`. `fill` is used for indentation, by default `" "`.
pub fun indent : (s : std/core/types/string, n : (std/core/types/optional :: V -> V)<std/core/types/int>, fill : (std/core/types/optional :: V -> V)<std/core/types/string>) -> std/core/types/string;
// monadic lift
fun .mlift1210-jaro-match : forall<(_h :: H),(h1 :: H)> (.y.1184 : std/core/types/int, .y.1185 : std/core/types/int) -> <(std/core/types/local :: H -> X)<(h1 :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>> (std/core/types/int, std/core/types/int);
// monadic lift
fun .mlift1211-jaro-match : forall<(_h :: H),(h1 :: H)> (transposes : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, .y.1184 : std/core/types/int) -> <(std/core/types/local :: H -> X)<(h1 :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>> (std/core/types/int, std/core/types/int);
// monadic lift
fun .mlift1212-jaro-match : forall<(_h :: H),(h1 :: H)> (wild_2 : ()) -> <(std/core/types/local :: H -> X)<(h1 :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>> (std/core/types/maybe :: V -> V)<()>;
// monadic lift
fun .mlift1213-jaro-match : forall<(_h :: H),(h1 :: H)> (transposes : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, .y.1176 : std/core/types/int) -> <(std/core/types/local :: H -> X)<(h1 :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>> ();
// monadic lift
fun .mlift1214-jaro-match : forall<(_h :: H),(h1 :: H)> (j1 : std/core/types/int, lastmatch : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, .c.1178 : ()) -> (std/core/types/maybe :: V -> V)<()>;
// monadic lift
fun .mlift1215-jaro-match : forall<(_h :: H),(h1 :: H)> (j1 : std/core/types/int, lastmatch : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, transposes : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, .y.1175 : std/core/types/int) -> <(std/core/types/local :: H -> X)<(h1 :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>> (std/core/types/maybe :: V -> V)<()>;
// monadic lift
fun .mlift1216-jaro-match : forall<(_h :: H),(h1 :: H)> (j1 : std/core/types/int, lastmatch : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, transposes : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, wild_0 : ()) -> <(std/core/types/local :: H -> X)<(h1 :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>> (std/core/types/maybe :: V -> V)<()>;
// monadic lift
fun .mlift1217-jaro-match : forall<(_h :: H),(h1 :: H)> (j1 : std/core/types/int, lastmatch : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, matches : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, transposes : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, .y.1173 : std/core/types/int) -> <(std/core/types/local :: H -> X)<(h1 :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>> (std/core/types/maybe :: V -> V)<()>;
// monadic lift
fun .mlift1218-jaro-match : forall<(_h :: H),(h1 :: H)> (j1 : std/core/types/int, lastmatch : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, matches : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, transposes : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, wild_ : ()) -> <(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> (std/core/types/maybe :: V -> V)<()>;
// monadic lift
fun .mlift1219-jaro-match : forall<(_h :: H),(h1 :: H)> (j1 : std/core/types/int, lastmatch : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, matched : (compat/array/array :: (H, V) -> V)<(_h :: H),std/core/types/bool>, matches : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, transposes : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, .y.1171 : std/core/types/bool) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/local :: H -> X)<(h1 :: H)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>> (std/core/types/maybe :: V -> V)<()>;
// monadic lift
fun .mlift1220-jaro-match : forall<(_h :: H),(h1 :: H)> (c : std/core/types/char, j1 : std/core/types/int, lastmatch : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, matched : (compat/array/array :: (H, V) -> V)<(_h :: H),std/core/types/bool>, matches : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, transposes : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, .y.1170 : std/core/types/char) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> (std/core/types/maybe :: V -> V)<()>;
// monadic lift
fun .mlift1221-jaro-match : forall<(_h :: H),(h1 :: H)> (wild_3 : (std/core/types/maybe :: V -> V)<()>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h1 :: H)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>> ();
// monadic lift
fun .mlift1222-jaro-match : forall<(_h :: H),(h1 :: H)> (matches : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, transposes : (std/core/types/local-var :: (H, V) -> V)<(h1 :: H),std/core/types/int>, wild_4 : ()) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h1 :: H)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>> (std/core/types/int, std/core/types/int);
fun jaro-match : (v : (std/core/types/vector :: V -> V)<std/core/types/char>, w : (std/core/types/vector :: V -> V)<std/core/types/char>, lim : std/core/types/int) -> (std/core/types/int, std/core/types/int);
fun unitPrepend : forall<(h :: H)> (b : (builder :: H -> V)<(h :: H)>, s : std/core/types/string) -> <(std/core/types/write :: H -> X)<(h :: H)>> ();
// O(1). Append to a string builder
pub fun append : forall<(h :: H)> (b : (builder :: H -> V)<(h :: H)>, s : std/core/types/string) -> <(std/core/types/write :: H -> X)<(h :: H)>> (builder :: H -> V)<(h :: H)>;
// O(1). Prepend a string in front of a string builder
pub fun prepend : forall<(h :: H)> (b : (builder :: H -> V)<(h :: H)>, s : std/core/types/string) -> <(std/core/types/write :: H -> X)<(h :: H)>> (builder :: H -> V)<(h :: H)>;
// monadic lift
fun .mlift1223-with-builder : forall<(_h :: H),(e :: E)> (b : (builder :: H -> V)<(_h :: H)>, wild_ : ()) -> <(std/core/types/st :: H -> E)<(_h :: H)>|(e :: E)> std/core/types/string;
// Do `action` with a given `:builder` and return the `:string` that was built.
pub fun with-builder : forall<(e :: E)> (action : forall<(h :: H)> (b : (builder :: H -> V)<(h :: H)>) -> <(std/core/types/st :: H -> E)<(h :: H)>|(e :: E)> ()) -> (e :: E) std/core/types/string;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
specialize "***" fun jaro-match // inline size: 1
  = fn(v: (std/core/types/vector :: V -> V)<std/core/types/char>, w: (std/core/types/vector :: V -> V)<std/core/types/char>, lim: std/core/types/int){
    std/core/try-default<(std/core/types/int, std/core/types/int),<(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>>>((std/core/types/(,)<std/core/types/int,std/core/types/int>(0, 0)), (fn<<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>>>(){
        (std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>>,(action : forall<(h1 :: H)> () -> <(std/core/types/local :: H -> X)<(h1 :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>> (std/core/types/int, std/core/types/int)) -> (() -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>> (std/core/types/int, std/core/types/int)),(action : forall<(h1 :: H)> () -> <(std/core/types/local :: H -> X)<(h1 :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>> (std/core/types/int, std/core/types/int)) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>> (() -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>> (std/core/types/int, std/core/types/int))>((std/core/types/unsafe-no-local-cast<(std/core/types/int, std/core/types/int),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h :: H)>,(std/core/types/write :: H -> X)<(_h :: H)>,(std/core/types/alloc :: H -> X)<(_h :: H)>>>))((forall<(h :: H)> fn<<(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>>(){
          val matched : (compat/array/array :: (H, V) -> V)<(_h1 :: H),std/core/types/bool>
                = std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(n : std/core/types/int, default : std/core/types/bool) -> (compat/array/array :: (H, V) -> V)<(_h1 :: H),std/core/types/bool>,(n : std/core/types/int, default : std/core/types/bool) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>> (compat/array/array :: (H, V) -> V)<(_h1 :: H),std/core/types/bool>>((compat/array/array<(_h1 :: H),std/core/types/bool>))((std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(v : (std/core/types/vector :: V -> V)<std/core/types/char>) -> std/core/types/int,(v : (std/core/types/vector :: V -> V)<std/core/types/char>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>> std/core/types/int>((std/core/length.2<std/core/types/char>))(w)), std/core/types/False);
          std/core/hnd/local-var<std/core/types/int,(std/core/types/int, std/core/types/int),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(h :: H)>(0, (fn<<(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>>(transposes: (std/core/types/local-var :: (H, V) -> V)<(h :: H),std/core/types/int>){
              (std/core/hnd/local-var<std/core/types/int,(std/core/types/int, std/core/types/int),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(h :: H)>(0, (fn<<(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>>(matches: (std/core/types/local-var :: (H, V) -> V)<(h :: H),std/core/types/int>){
                  (std/core/hnd/local-var<std/core/types/int,(std/core/types/int, std/core/types/int),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(h :: H)>(0, (fn<<(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>>(lastmatch: (std/core/types/local-var :: (H, V) -> V)<(h :: H),std/core/types/int>){
                      val _4 : ()
                            = (std/core/foreach-indexed.1<std/core/types/char,<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>>(v, (fn<<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>>(i: std/core/types/int, c: std/core/types/char){
                                val start : std/core/types/int
                                  = (std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(i : std/core/types/int, j : std/core/types/int) -> std/core/types/int,(i : std/core/types/int, j : std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>> std/core/types/int>((fn(i0: std/core/types/int, j: std/core/types/int){
                                    (match ((std/core/(>=.1)(i0, j))) {
                                      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
                                         -> i0;
                                      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
                                         -> j;
                                    });
                                  }))(0, (std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(x : std/core/types/int, y : std/core/types/int) -> std/core/types/int,(x : std/core/types/int, y : std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>> std/core/types/int>((fn(x: std/core/types/int, y: std/core/types/int){
                                      (std/core/int-sub(x, y));
                                    }))(i, lim))));
                                val end : std/core/types/int
                                  = (std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(i : std/core/types/int, j : std/core/types/int) -> std/core/types/int,(i : std/core/types/int, j : std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>> std/core/types/int>((fn(i1: std/core/types/int, j0: std/core/types/int){
                                    (match ((std/core/(<=.1)(i1, j0))) {
                                      ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
                                         -> i1;
                                      ((.skip std/core/types/False() : std/core/types/bool ) as .pat00: std/core/types/bool)
                                         -> j0;
                                    });
                                  }))((std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(x : std/core/types/int, y : std/core/types/int) -> std/core/types/int,(x : std/core/types/int, y : std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>> std/core/types/int>((fn(x0: std/core/types/int, y0: std/core/types/int){
                                      (std/core/int-sub(x0, y0));
                                    }))((std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(v : (std/core/types/vector :: V -> V)<std/core/types/char>) -> std/core/types/int,(v : (std/core/types/vector :: V -> V)<std/core/types/char>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>> std/core/types/int>((std/core/length.2<std/core/types/char>))(w)), 1)), (std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(x : std/core/types/int, y : std/core/types/int) -> std/core/types/int,(x : std/core/types/int, y : std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>> std/core/types/int>((fn(x1: std/core/types/int, y1: std/core/types/int){
                                      (std/core/int-add(x1, y1));
                                    }))(i, lim))));
                                val _3 : ((std/core/types/maybe :: V -> V)<()>)
                                  = (std/core/for-while<(),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>>(start, end, (fn<<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>>(j1: std/core/types/int){
                                      (match ((std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(std/core/types/char, std/core/types/char) -> std/core/types/bool,(std/core/types/char, std/core/types/char) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>> std/core/types/bool>(std/core/(!=))((std/core/([])<std/core/types/char>(w, j1)), c))) {
                                        ((std/core/types/True() : std/core/types/bool ) as .pat2: std/core/types/bool)
                                           -> std/core/types/Nothing<()>;
                                        (.pat01: std/core/types/bool)
                                           -> (match ((compat/array/([])<(_h1 :: H),std/core/types/bool,<(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>>(matched, j1))) {
                                            ((std/core/types/True() : std/core/types/bool ) as .pat10: std/core/types/bool)
                                               -> std/core/types/Nothing<()>;
                                            ((.skip std/core/types/False() : std/core/types/bool ) as .pat20: std/core/types/bool)
                                               -> val _ : ()
                                                    = compat/array/([].1)<(_h1 :: H),std/core/types/bool>(matched, j1, std/core/types/True);
                                                  val _0 : ()
                                                    = std/core/types/local-set<std/core/types/int,<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(h :: H)>(matches, (std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(x : std/core/types/int, y : std/core/types/int) -> std/core/types/int,(x : std/core/types/int, y : std/core/types/int) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>> std/core/types/int>((fn(x2: std/core/types/int, y2: std/core/types/int){
                                                        (std/core/int-add(x2, y2));
                                                      }))((std/core/types/local-get<std/core/types/int,(h :: H),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>>(matches)), 1)));
                                                  val _1 : ()
                                                    = (match ((std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(x : std/core/types/int, y : std/core/types/int) -> std/core/types/bool,(x : std/core/types/int, y : std/core/types/int) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>> std/core/types/bool>(std/core/(>.1))((std/core/types/local-get<std/core/types/int,(h :: H),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>>(lastmatch)), j1))) {
                                                      ((std/core/types/True() : std/core/types/bool ) as .pat3: std/core/types/bool)
                                                         -> std/core/types/local-set<std/core/types/int,<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(h :: H)>(transposes, (std/core/types/.open<(std/core/types/(<>) :: E),<(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(x : std/core/types/int, y : std/core/types/int) -> std/core/types/int,(x : std/core/types/int, y : std/core/types/int) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>> std/core/types/int>((fn(x3: std/core/types/int, y3: std/core/types/int){
                                                            (std/core/int-add(x3, y3));
                                                          }))((std/core/types/local-get<std/core/types/int,(h :: H),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>>(transposes)), 1)));
                                                      ((.skip std/core/types/False() : std/core/types/bool ) as .pat4: std/core/types/bool)
                                                         -> std/core/types/();
                                                    });
                                                  val _2 : ()
                                                    = std/core/types/local-set<std/core/types/int,<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>,(h :: H)>(lastmatch, j1);
                                              std/core/types/Just<()>(std/core/types/());
                                          });
                                      });
                                    })));
                                std/core/types/();
                              })));
                      (std/core/types/(,)<std/core/types/int,std/core/types/int>((std/core/types/local-get<std/core/types/int,(h :: H),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>>(matches)), (std/core/types/local-get<std/core/types/int,(h :: H),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/read :: H -> X)<(_h1 :: H)>,(std/core/types/write :: H -> X)<(_h1 :: H)>,(std/core/types/alloc :: H -> X)<(_h1 :: H)>>>(transposes))));
                    })));
                })));
            }));
        }))());
      }));
  };
fun append // inline size: 1
  = forall<(h :: H)> fn<<(std/core/types/write :: H -> X)<(h :: H)>>>(b: (builder :: H -> V)<(h :: H)>, s: std/core/types/string){
    val _ : ()
          = compat/string/unitAppend<(h :: H)>(b, s);
    b;
  };
fun prepend // inline size: 1
  = forall<(h :: H)> fn<<(std/core/types/write :: H -> X)<(h :: H)>>>(b: (builder :: H -> V)<(h :: H)>, s: std/core/types/string){
    val _ : ()
          = compat/string/unitPrepend<(h :: H)>(b, s);
    b;
  };