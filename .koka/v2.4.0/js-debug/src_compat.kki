module interface src/compat
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types = "";
import std/core = std/core = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
/*
  Operator "+" --> addition of 2 strings
*/
pub fun (+) : (left : std/core/types/string, right : std/core/types/string) -> std/core/types/string;
/*
  Operator "+" --> addition of 2 list<string>
*/
pub fun (+.1) : forall<a> (left : (std/core/list :: V -> V)<a>, right : (std/core/list :: V -> V)<a>) -> (std/core/list :: V -> V)<a>;
/*
  returns the length of a string
*/
pub fun length : (s : std/core/types/string) -> std/core/types/int;
/*
  from core.kk
*/
fun makeString : (n : std/core/types/int, c : std/core/types/char) -> std/core/types/string;
/*
  endsWith function from core.kk
*/
pub fun endsWith : (s : std/core/types/string, post : std/core/types/string) -> std/core/types/bool;
/*
  Return the extension (including the `.`)  
  `extname("foo.ext") == ".ext"`, `extname("bla.") == "."`, `extname("bla") == ""` 
  from path.kk
*/
pub fun extname : (p : std/core/types/string) -> std/core/types/string;
/*
  helper function for showHex from core.kk
*/
fun gformat : forall<a> (value : a, format : std/core/types/string) -> std/core/types/string;
// Does string `s`  contain the character `c`  ?
pub fun indexOf : (s : std/core/types/string, c : std/core/types/char) -> std/core/types/int;
// Does string `s`  contain the string `sub`  ?
pub fun indexOf.1 : (s : std/core/types/string, sub : std/core/types/string) -> std/core/types/int;
// Does string `s`  contain the character `c`  ?
pub fun lastIndexOf : (s : std/core/types/string, c : std/core/types/char) -> std/core/types/int;
// Does string `s`  contain the string `sub`  ?
pub fun lastIndexOf.1 : (s : std/core/types/string, sub : std/core/types/string) -> std/core/types/int;
pub val maxInt : std/core/types/int;
/*
  startsWith function from core.kk
*/
pub fun startsWith : (s : std/core/types/string, pre : std/core/types/string) -> std/core/types/bool;
pub fun substr2 : (s : std/core/types/string, start : std/core/types/int, len : std/core/types/int) -> std/core/types/string;
/*
  substring functions operating in csharp and js
  all from core.kk
*/
pub fun substr1 : (s : std/core/types/string, start : std/core/types/int) -> std/core/types/string;
/*
  to lowercase funtion from core.kk
*/
pub fun toLower : (s : std/core/types/string) -> std/core/types/string;
/*
  Construct a string of `n`  characters `c`  (or the empty string if `n <= 0` )
  from core.kk
*/
fun string : (n : std/core/types/int, c : std/core/types/char) -> std/core/types/string;
/*
  Right-align a string to width `width`  using `char`  (default is a space) to fill from the left.
  from core.kk
*/
pub fun align : (s : std/core/types/string, width : std/core/types/int, char : (std/core/types/optional :: V -> V)<std/core/types/char>) -> std/core/types/string;
/*
  showHex function from core.kk
*/
pub fun showHex : (i : std/core/types/int, width : (std/core/types/optional :: V -> V)<std/core/types/int>, useCapitals : (std/core/types/optional :: V -> V)<std/core/types/bool>) -> std/core/types/string;
pub fun substr : (s : std/core/types/string, start : std/core/types/int) -> std/core/types/string;
pub fun substr.1 : (s : std/core/types/string, start : std/core/types/int, len : std/core/types/int) -> std/core/types/string;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
fun (+) // inline size: 1
  = fn(left: std/core/types/string, right: std/core/types/string){
    std/core/(++.1)(left, right);
  };
fun (+.1) // inline size: 1
  = forall<a> fn(left: (std/core/list :: V -> V)<a>, right: (std/core/list :: V -> V)<a>){
    std/core/append<a>(left, right);
  };
fun length // inline size: 1
  = fn(s: std/core/types/string){
    std/core/count.1(s);
  };
inline val maxInt // inline size: 0
  = 2147483647;
fun string // inline size: 3
  = fn(n: std/core/types/int, c: std/core/types/char){
    match ((std/core/(<=.1)(n, 0))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> "";
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> src/compat/makeString(n, c);
    };
  };
fun substr.1 // inline size: 3
  = fn(s: std/core/types/string, start: std/core/types/int, len: std/core/types/int){
    match ((std/core/(<=.1)(len, 0))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> "";
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> src/compat/substr2(s, start, len);
    };
  };