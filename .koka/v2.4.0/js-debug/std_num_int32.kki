// 32-bit signed integers.
//
// Using 32-bit signed two's complement representation with wrapping on overflow, 
// e.g. `max-int32 + 1.int32 == min-int32`.
module interface std/num/int32
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types = "";
import std/core/hnd = std/core/hnd = "";
import std/core = std/core = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
// An alias for the empty effect.
local alias std/core/total :: E = (std/core/types/(<>) :: E) = 1;
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
// Take the bitwise _xor_ of two `:int32`s
pub fun (^) : (x : std/core/types/int32, y : std/core/types/int32) -> std/core/types/int32;
pub fun compare : (x : std/core/types/int32, y : std/core/types/int32) -> std/core/types/order;
// Return the maximum of two integers
pub fun max : (i : std/core/types/int32, j : std/core/types/int32) -> std/core/types/int32;
// Return the minimum of two integers
pub fun min : (i : std/core/types/int32, j : std/core/types/int32) -> std/core/types/int32;
// Show an `:int32` in hexadecimal notation
// The `width`  parameter specifies how wide the hex value is where `'0'`  is used to align.\
// The `use-capitals` parameter (= `True`) determines if captical letters should be used to display the hexadecimal digits.\
// The `pre` (=`"0x"`) is an optional prefix for the number (goes between the sign and the number).
pub fun show-hex : (i : std/core/types/int32, width : (std/core/types/optional :: V -> V)<std/core/types/int>, use-capitals : (std/core/types/optional :: V -> V)<std/core/types/bool>, pre : (std/core/types/optional :: V -> V)<std/core/types/string>) -> std/core/types/string;
// Convert an `:int32` to an `:int` but interpret the `:int32` as a 32-bit unsigned value.
pub fun uint : (i : std/core/types/int32) -> std/core/types/int;
pub fun sign : (i : std/core/types/int32) -> std/core/types/order;
pub val one : std/core/types/int32;
pub val zero : std/core/types/int32;
// Convert a boolean to an `:int32`.
pub fun int32 : (b : std/core/types/bool) -> std/core/types/int32;
// The minimal integer value before underflow happens
pub val min-int32 : std/core/types/int32;
// Euclidean-0 modulus. See `(/):(x : int32, y : int32) -> int32` division for more information.
pub fun (%) : (x : std/core/types/int32, y : std/core/types/int32) -> std/core/types/int32;
/* 
Euclidean-0 division.
Euclidean division is defined as: For any `D`  and `d`  where `d!=0` , we have:

1. `D == d*(D/d) + (D%d)`
2. `D%d`  is always positive where `0 <= D%d < abs(d)`

Moreover, Euclidean-0 is a total function, for the case where `d==0`  we have
that `D%0 == D`  and `D/0 == 0` . So property (1) still holds, but not property (2).
Useful laws that hold for Euclidean-0 division:

* `D/(-d) == -(D/d)`
* `D%(-d) == D%d`
* `D/(2^n) == sar(D,n)         `  (with `0 <= n <= 31`)
* `D%(2^n) == D & ((2^n) - 1)  `  (with `0 <= n <= 31`)

Note that an interesting edge case is `min-int32 / -1` which equals `min-int32` since in modulo 32-bit
arithmetic `min-int32 == -1 * min-int32 == -1 * (min-int32 / -1) + (min-int32 % -1)` satisfying property (1).
Of course `(min-int32 + 1) / -1` is again positive (namely `max-int32`).

See also _Division and modulus for computer scientists, Daan Leijen, 2001_ 
[pdf](http://research.microsoft.com/pubs/151917/divmodnote.pdf) .
*/
pub fun (/) : (x : std/core/types/int32, y : std/core/types/int32) -> std/core/types/int32;
// Negate a 32-bit integer
pub fun negate : (i : std/core/types/int32) -> std/core/types/int32;
// Return the absolute value of an integer.
// Raises an exception if the `:int32` is `min-int32`
// (since the negation of `min-int32` equals itself and is still negative)
pub fun abs : (i : std/core/types/int32) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> std/core/types/int32;
// Return the absolute value of an integer.
// Returns 0 if the `:int32` is `min-int32`
// (since the negation of `min-int32` equals itself and is still negative)
pub fun abs0 : (i : std/core/types/int32) -> std/core/types/int32;
// The number of bits in an `:int32` (always 32)
pub val bits-int32 : std/core/types/int32;
// Convert an `:int32` to a boolean.
pub fun bool : (i : std/core/types/int32) -> std/core/types/bool;
// Truncated division (as in C). See also `(/):(x : int32, y : int32) -> int32`.
pub fun cdiv : (i : std/core/types/int32, j : std/core/types/int32) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> std/core/types/int32;
// Truncated modulus (as in C). See also `(%):(x : int32, y : int32) -> int32`.
pub fun cmod : (i : std/core/types/int32, j : std/core/types/int32) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> std/core/types/int32;
// Decrement a 32-bit integer.
pub fun dec : (i : std/core/types/int32) -> std/core/types/int32;
// Increment a 32-bit integer.
pub fun inc : (i : std/core/types/int32) -> std/core/types/int32;
pub fun divmod : (x : std/core/types/int32, y : std/core/types/int32) -> (std/core/types/int32, std/core/types/int32);
// monadic lift
fun .mlift1596-fold-int32 : forall<a,(e :: E)> (end : std/core/types/int32, f : (std/core/types/int32, a) -> (e :: E) a, start : std/core/types/int32, x : a) -> (e :: E) a;
pub fun fold-int32 : forall<a,(e :: E)> (start : std/core/types/int32, end : std/core/types/int32, init : a, f : (std/core/types/int32, a) -> (e :: E) a) -> (e :: E) a;
// Returns `true` if the integer `i`  is an even number.
pub fun is-even : (i : std/core/types/int32) -> std/core/types/bool;
// Returns `true` if the integer `i`  is an odd number.
pub fun is-odd : (i : std/core/types/int32) -> std/core/types/bool;
// The maximal integer value before overflow happens
pub val max-int32 : std/core/types/int32;
// Bitwise rotate an `:int32` `n % 32` bits to the left.
pub fun rotl : (i : std/core/types/int32, shift : std/core/types/int) -> std/core/types/int32;
// Bitwise rotate an `:int32` `n % 32` bits to the right.
pub fun rotr : (i : std/core/types/int32, shift : std/core/types/int) -> std/core/types/int32;
// Arithmetic shift an `:int32` to the right by `n % 32` bits. Shifts in the sign bit from the left.
pub fun sar : (i : std/core/types/int32, shift : std/core/types/int) -> std/core/types/int32;
// Shift an `:int32` `i` to the left by `n & 31` bits.
pub fun shl : (i : std/core/types/int32, shift : std/core/types/int) -> std/core/types/int32;
// Convert an `:int32` to a string
pub fun show : (i : std/core/types/int32) -> std/core/types/string;
// Show an `:int32` in hexadecimal notation interpreted as an unsigned 32-bit value.
// The `width`  parameter specifies how wide the hex value is where `'0'`  is used to align.\
// The `use-capitals` parameter (= `True`) determines if captical letters should be used to display the hexadecimal digits.\
// The `pre` (=`"0x"`) is an optional prefix for the number.
pub fun show-hex32 : (i : std/core/types/int32, width : (std/core/types/optional :: V -> V)<std/core/types/int>, use-capitals : (std/core/types/optional :: V -> V)<std/core/types/bool>, pre : (std/core/types/optional :: V -> V)<std/core/types/string>) -> std/core/types/string;
// Logical shift an `:int32` to the right by `n % 32` bits. Shift in zeros from the left.
pub fun shr : (i : std/core/types/int32, shift : std/core/types/int) -> std/core/types/int32;
// Convert an `:int` to `:int32` but interpret the `int` as an unsigned 32-bit value.
// `i` is clamped between `0` and `0xFFFFFFFF`.\
// `0x7FFF_FFFF.uint32 == 0x7FFF_FFFF.int32 == max-int32`\
// `0x8000_0000.uint32 == -0x8000_0000.int32 == min-int32`\
// `0xFFFF_FFFF.uint32 == -1.int32`\
pub fun uint32 : (i : std/core/types/int) -> std/core/types/int32;
// Negate an 32-bit integer
pub fun (~) : (i : std/core/types/int32) -> (std/core/total :: E) std/core/types/int32;
 
//------------------------------
//#kki: external declarations
 
pub extern (==) : (std/core/types/int32, std/core/types/int32) -> std/core/types/bool {
  inline "(#1 == #2)";
  js inline "(#1 === #2)";
};
pub extern (!=) : (std/core/types/int32, std/core/types/int32) -> std/core/types/bool {
  inline "(#1 != #2)";
  js inline "(#1 !== #2)";
};
pub extern (<=) : (std/core/types/int32, std/core/types/int32) -> std/core/types/bool = inline "(#1 <= #2)";
pub extern (>=) : (std/core/types/int32, std/core/types/int32) -> std/core/types/bool = inline "(#1 >= #2)";
pub extern (<) : (std/core/types/int32, std/core/types/int32) -> std/core/types/bool = inline "(#1 < #2)";
pub extern (>) : (std/core/types/int32, std/core/types/int32) -> std/core/types/bool = inline "(#1 > #2)";
pub extern (+) : (std/core/types/int32, std/core/types/int32) -> std/core/types/int32 {
  c inline "(int32_t)((uint32_t)#1 + (uint32_t)#2)";
  js inline "((#1 + #2)|0)";
};
pub extern (-) : (std/core/types/int32, std/core/types/int32) -> std/core/types/int32 {
  c inline "(int32_t)((uint32_t)#1 - (uint32_t)#2)";
  js inline "((#1 - #2)|0)";
};
pub extern is-neg : (i : std/core/types/int32) -> std/core/types/bool = inline "0 > #1";
pub extern is-pos : (i : std/core/types/int32) -> std/core/types/bool = inline "0 < #1";
pub extern is-zero : (i : std/core/types/int32) -> std/core/types/bool {
  inline "0 == #1";
  js inline "0 === #1";
};
// Multiply two 32-bit integers.
pub extern (*) : (std/core/types/int32, std/core/types/int32) -> std/core/types/int32 {
  inline "(int32_t)((uint32_t)#1 * (uint32_t)#2)";
  js inline "$std_core._int32_multiply(#1,#2)";
};
// Take the bitwise _and_ of two `:int32`s
pub extern and : (std/core/types/int32, std/core/types/int32) -> std/core/types/int32 = inline "(#1 & #2)";
// Take the bitwise _or_ of two `:int32`s
pub extern or : (std/core/types/int32, std/core/types/int32) -> std/core/types/int32 = inline "(#1 | #2)";
// Take the bitwise _xor_ of two `:int32`s
pub extern xor : (std/core/types/int32, std/core/types/int32) -> std/core/types/int32 = inline "(#1 ^ #2)";
// Bitwise _not_ of an `:int32`, i.e. flips all bits.
pub extern not : (i : std/core/types/int32) -> std/core/types/int32 = inline "(~#1)";
// Shift an `:int32` `i` to the left by `n & 31` bits.
extern shl32 : (std/core/types/int32, std/core/types/int32) -> std/core/types/int32 {
  c inline "kk_shl32(#1,#2)";
  js inline "#1 << #2";
};
// Logical shift an `:int32` to the right by `n % 32` bits. Shift in zeros from the left.
extern shr32 : (std/core/types/int32, std/core/types/int32) -> std/core/types/int32 {
  c inline "(int32_t)kk_shr32(#1,#2)";
  cs inline "(Int32)(((UInt32)#1)>>#2)";
  js inline "#1 >>> #2";
};
// Arithmetic shift an `:int32` to the right by `n % 32` bits. Shifts in the sign bit from the left.
extern sar32 : (std/core/types/int32, std/core/types/int32) -> std/core/types/int32 {
  c inline "kk_sar32(#1,#2)";
  cs inline "(#1>>#2)";
  js inline "#1 >> #2";
};
// Bitwise rotate an `:int32` `n % 32` bits to the left.
extern rotl32 : (i : std/core/types/int32, n : std/core/types/int32) -> std/core/types/int32 {
  c inline "(int32_t)kk_bits_rotl32(#1,#2)";
  js inline "$std_core._int32_rotl(#1,#2)";
};
// Bitwise rotate an `:int32` `n % 32` bits to the right.
extern rotr32 : (i : std/core/types/int32, n : std/core/types/int32) -> std/core/types/int32 {
  c inline "(int32_t)kk_bits_rotr32(#1,#2)";
  js inline "$std_core._int32_rotr(#1,#2)";
};
// Truncated division (as in C). See also `(/):(x : int32, y : int32) -> int32`.
pub extern unsafe-cdiv : (std/core/types/int32, std/core/types/int32) -> std/core/types/int32 {
  inline "(#1 / #2)";
  js inline "((#1/#2)|0)";
};
// Truncated modulus (as in C). See also `(%):(x : int32, y : int32) -> int32`.
pub extern unsafe-cmod : (std/core/types/int32, std/core/types/int32) -> std/core/types/int32 {
  inline "(#1 % #2)";
  js inline "((#1 % #2)|0)";
};
// Convert an 32-bit integer to a float64.
pub extern float64 : (i : std/core/types/int32) -> std/core/types/float64 {
  c inline "(double)(#1)";
  cs inline "(double)(#1)";
  js inline "(#1)";
};
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
recursive specialize "___*" fun fold-int32 // inline size: 11
  = forall<a,(e :: E)> fn<(e :: E)>(start: std/core/types/int32, end: std/core/types/int32, init: a, f: (std/core/types/int32, a) -> (e :: E) a){
    (match ((std/core/types/.open<(std/core/types/(<>) :: E),(e :: E),(std/core/types/int32, std/core/types/int32) -> std/core/types/bool,(std/core/types/int32, std/core/types/int32) -> (e :: E) std/core/types/bool>(std/num/int32/(>=))(start, end))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> init;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> val x : a
                  = f(start, init);
        std/num/int32/fold-int32<a,(e :: E)>((std/core/types/.open<(std/core/types/(<>) :: E),(e :: E),(x : std/core/types/int32) -> std/core/types/int32,(x : std/core/types/int32) -> (e :: E) std/core/types/int32>((std/core/types/unsafe-decreasing<std/core/types/int32>))((std/core/types/.open<(std/core/types/(<>) :: E),(e :: E),(i : std/core/types/int32) -> std/core/types/int32,(i : std/core/types/int32) -> (e :: E) std/core/types/int32>((fn(i: std/core/types/int32){
            (std/num/int32/(+)(i, (std/core/int32(1))));
          }))(start)))), end, x, f);
    });
  };
fun (^) // inline size: 1
  = fn(x: std/core/types/int32, y: std/core/types/int32){
    std/num/int32/xor(x, y);
  };
fun compare // inline size: 4
  = fn(x: std/core/types/int32, y: std/core/types/int32){
    match ((std/num/int32/(<)(x, y))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Lt;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> (match ((std/num/int32/(>)(x, y))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/types/Gt;
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
             -> std/core/types/Eq;
        });
    };
  };
fun max // inline size: 2
  = fn(i: std/core/types/int32, j: std/core/types/int32){
    match ((std/num/int32/(>=)(i, j))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> i;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> j;
    };
  };
fun min // inline size: 2
  = fn(i: std/core/types/int32, j: std/core/types/int32){
    match ((std/num/int32/(<=)(i, j))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> i;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> j;
    };
  };
fun sign // inline size: 4
  = fn(i: std/core/types/int32){
    match ((std/num/int32/is-pos(i))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Gt;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> (match ((std/num/int32/is-neg(i))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/types/Lt;
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
             -> std/core/types/Eq;
        });
    };
  };
fun int32 // inline size: 1
  = fn(b: std/core/types/bool){
    match (b) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/num/int32/one;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/num/int32/zero;
    };
  };
fun negate // inline size: 2
  = fn(i: std/core/types/int32){
    std/num/int32/(-)((std/core/int32(0)), i);
  };
fun bool // inline size: 1
  = fn(i: std/core/types/int32){
    std/num/int32/(!=)(i, std/num/int32/zero);
  };
fun dec // inline size: 2
  = fn(i: std/core/types/int32){
    std/num/int32/(-)(i, (std/core/int32(1)));
  };
fun inc // inline size: 2
  = fn(i: std/core/types/int32){
    std/num/int32/(+)(i, (std/core/int32(1)));
  };
fun is-even // inline size: 4
  = fn(i: std/core/types/int32){
    std/num/int32/(==)((std/num/int32/and(i, (std/core/int32(1)))), (std/core/int32(0)));
  };
fun is-odd // inline size: 4
  = fn(i: std/core/types/int32){
    std/num/int32/(==)((std/num/int32/and(i, (std/core/int32(1)))), (std/core/int32(1)));
  };
fun rotl // inline size: 2
  = fn(i: std/core/types/int32, shift: std/core/types/int){
    std/num/int32/rotl32(i, (std/core/int32(shift)));
  };
fun rotr // inline size: 2
  = fn(i: std/core/types/int32, shift: std/core/types/int){
    std/num/int32/rotr32(i, (std/core/int32(shift)));
  };
fun sar // inline size: 2
  = fn(i: std/core/types/int32, shift: std/core/types/int){
    std/num/int32/sar32(i, (std/core/int32(shift)));
  };
fun shl // inline size: 2
  = fn(i: std/core/types/int32, shift: std/core/types/int){
    std/num/int32/shl32(i, (std/core/int32(shift)));
  };
fun show // inline size: 2
  = fn(i: std/core/types/int32){
    std/core/show((std/core/int.1(i)));
  };
fun shr // inline size: 2
  = fn(i: std/core/types/int32, shift: std/core/types/int){
    std/num/int32/shr32(i, (std/core/int32(shift)));
  };
fun (~) // inline size: 2
  = fn<(std/core/total :: E)>(i: std/core/types/int32){
    std/num/int32/(-)((std/core/int32(0)), i);
  };